{{ define "css_block" }}
<link rel="stylesheet" href="/static/css/form.css">
{{ end }}

{{define "content"}}
<div class="container mt-5">
    <div class="form-container">
        <h1>{{t "page.newservice"}}</h1>
        
        {{range .FlashMessages}}
            <div class="alert alert-info">{{.}}</div>
        {{end}}

        {{if .Form.Errors.general}}
            <div class="alert alert-danger">{{.Form.Errors.general}}</div>
        {{end}}

        <form method="POST" class="needs-validation" novalidate>
            <div class="mb-3">
                <label for="service_name" class="form-label">{{t "new_service.name_label"}} *</label>
                <input type="text" class="form-control {{if .Form.Errors.service_name}}invalid{{end}}" 
                       id="service_name" name="service_name" value="{{.Form.ServiceName}}" required>
                {{if .Form.Errors.service_name}}
                    <span class="error">{{.Form.Errors.service_name}}</span>
                {{end}}
            </div>

            <div class="mb-3">
                <label for="domains-container" class="form-label">{{t "new_service.url_label"}} *</label>
                <div id="domains-container">
                    <div class="domain-entry mb-2">
                        <div class="input-group">
                            <input type="text" class="form-control domain-input {{if .Form.Errors.service_url}}invalid{{end}}" 
                                   placeholder="example.com" required>
                            <button type="button" class="btn btn-danger remove-domain" style="display: none;">×</button>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-secondary btn-sm mt-2" id="add-domain">+ Add Domain</button>
                <input type="hidden" name="service_url" id="service_url_hidden" value="{{.Form.ServiceURL}}">
                {{if .Form.Errors.service_url}}
                    <span class="error">{{.Form.Errors.service_url}}</span>
                {{end}}
            </div>

            <div class="mb-3">
                <label for="wikipedia_url" class="form-label">{{t "new_service.wikipedia_label"}}</label>
                <input type="url" class="form-control {{if .Form.Errors.wikipedia_url}}invalid{{end}}" 
                       id="wikipedia_url" name="wikipedia_url" value="{{.Form.WikipediaURL}}" 
                       placeholder="https://en.wikipedia.org/wiki/Example">
                {{if .Form.Errors.wikipedia_url}}
                    <span class="error">{{.Form.Errors.wikipedia_url}}</span>
                {{end}}
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">{{t "new_service.email_label"}}</label>
                <input type="email" class="form-control {{if .Form.Errors.email}}invalid{{end}}" 
                       id="email" name="email" value="{{.Form.EmailAddress}}">
                <span class="help-text">{{t "new_service.email_help"}}</span>
                {{if .Form.Errors.email}}
                    <span class="error">{{.Form.Errors.email}}</span>
                {{end}}
            </div>

            <div class="mb-3">
                <label for="note" class="form-label">{{t "new_service.note_label"}}</label>
                <textarea class="form-control" id="note" name="note" rows="3">{{.Form.Note}}</textarea>
                <span class="help-text">{{t "new_service.note_help"}}</span>
            </div>

            <button type="submit" class="btn btn-primary">{{t "new_service.submit"}}</button>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const domainsContainer = document.getElementById('domains-container');
    const addDomainBtn = document.getElementById('add-domain');
    const hiddenInput = document.getElementById('service_url_hidden');

    // Initialize with existing domains if any
    if (hiddenInput.value) {
        const domains = hiddenInput.value.split(',').map(d => d.trim());
        domains.forEach((domain, index) => {
            if (index === 0) {
                domainsContainer.querySelector('.domain-input').value = domain;
            } else {
                addDomainField(domain);
            }
        });
    }

    // Show remove button if there's more than one domain
    updateRemoveButtons();

    addDomainBtn.addEventListener('click', () => {
        addDomainField();
        updateRemoveButtons();
    });

    domainsContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-domain')) {
            e.target.closest('.domain-entry').remove();
            updateRemoveButtons();
            updateHiddenInput();
        }
    });

    domainsContainer.addEventListener('input', (e) => {
        if (e.target.classList.contains('domain-input')) {
            updateHiddenInput();
        }
    });

    function addDomainField(value = '') {
        const domainEntry = document.createElement('div');
        domainEntry.className = 'domain-entry mb-2';
        domainEntry.innerHTML = `
            <div class="input-group">
                <input type="text" class="form-control domain-input" placeholder="example.com" value="${value}" required>
                <button type="button" class="btn btn-danger remove-domain">×</button>
            </div>
        `;
        domainsContainer.appendChild(domainEntry);
    }

    function updateRemoveButtons() {
        const removeButtons = domainsContainer.querySelectorAll('.remove-domain');
        removeButtons.forEach(btn => {
            btn.style.display = removeButtons.length > 1 ? '' : 'none';
        });
    }

    function updateHiddenInput() {
        const domains = Array.from(domainsContainer.querySelectorAll('.domain-input'))
            .map(input => input.value.trim())
            .filter(Boolean);
        hiddenInput.value = domains.join(',');
    }
});
</script>
{{end}} 